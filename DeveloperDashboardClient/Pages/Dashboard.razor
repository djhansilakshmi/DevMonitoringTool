@page "/"
@using DashboardLib.Dtos;
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<section class="fw-bolder fs-4">
    <div class="d-flex flex-row align-items-center justify-content-between">
        <div>
            @if (dashboardVMs == null)
            {
                <div>
                    <i class="fa fa-refresh fa-spin" style="font-size:19px;color:#284387"></i><span class="fw-normal fs-6 px-2">Fetching grid data...</span>
                </div>
            }
        </div>
        <div>
            <button class="btn btn-outline-dark">Download CSV</button>
        </div>
    </div>
</section>

<section>
    <EditForm Model="@searchForm" OnSubmit="@SubmitHandler" class="d-flex align-items-center py-5  justify-content-between">
        <div class="d-flex flex-fill align-items-center pe-4">
            <label class="flex-fill fw-normal fs-6 me-3 form-label">Team</label>
            @*<InputText id="teamfilter" @bind-Value="searchForm.TeamFilter"></InputText>*@
            <select class="custom-select form-select" title="Team is Required">
                <option value="Select" selected disabled="disabled">Select Team</option>
                <option value="contentsystem">Content system</option>
                <option value="maurauders">Maurauders</option>
                <option value="Team-42">Team42</option>
                <option value="ultron">Ultron</option>
            </select>
        </div> 
        <div class="d-flex flex-fill align-items-center pe-4">
            <label class="fw-normal fs-6 me-3 form-label">Project</label>

            <select @bind="selectedRepo" class="custom-select form-select" title="Project is Required">
                <option value="Select" selected disabled="disabled">Select Project</option>
                @if (dashboardVMs is not null)
                {
                    @foreach (var repo in dashboardVMs.Where(x => !x.Name.Contains("DevMonitoringTool", StringComparison.OrdinalIgnoreCase) & !x.Name.Contains("DevMonitoringToolAPI", StringComparison.OrdinalIgnoreCase)))
                    {
                        <option value="@repo.Name">@repo.Name</option>
                    }
                }
              
            </select>
        </div>
        <button @onclick="BtnSearch_GetProjectDetails" class="btn btn-outline-dark me-4">Search</button>
        <button @onclick="BtnResetFilter_GetAllProjectDetails" type="reset" class="btn btn-outline-danger">Reset All Filters</button>
    </EditForm>
</section>

@*<button type="button" @onclick=GetAllData>Get Data</button>*@

<table class="table grid-design">
    <thead>
        <tr>
            <th>Team</th>
            <th>Project</th>
            <th>Branch</th>
            <th>Coverage</th>
            <th>Build Id</th>
            <th>Build Status</th>
            <th>Last Deployed Date</th>
        </tr>
    </thead>
    <tbody>
        @if (dashboardVMs is not null)
        {
            @foreach (var dashboard in dashboardVMs)
            {
                @foreach (var branch in @dashboard.Branches)
                {
                    <tr>
                        <td>Maruaders</td>
                        <td><p data-toggle="modal" data-target="@dashboard" @onclick="@(()=>OnShowModalClick(dashboard))"> <span class="project-link">@dashboard.Name</span> </p></td>
                        <td>@branch.Name</td>
                        @*<td>@branch.PullRequests?.Count</td>*@
                        @*<td>sample 8.5</td>*@
                        @if (branch.CodeCoverage.Data.Repository.Metrics is not null && branch.CodeCoverage.Data.Repository.Metrics[9].Items[0].Values.Edges.Count > 0)
                        {
                            <td>@branch.CodeCoverage.Data.Repository.Metrics[9].Items[0].Values.Edges[0].Node.Value</td>
                            @*<td>@branch.Deployments[0].CreatorDetails?.login</td>*@
                        }
                        else
                        {
                            <td></td>

                        }

                        @if (branch.Actions is not null && branch?.Actions?.ActionWorkflowRuns?.Count > 0)
                        {
                            <td>@branch.Actions.ActionWorkflowRuns[0].ActionId</td>
                            <td>@branch.Actions.ActionWorkflowRuns[0].Conclusion</td>
                        }
                        else
                        {
                            <td></td>
                            <td></td>
                        }

                        @if (branch.Deployments is not null && branch.Deployments.Count > 0)
                        {
                            <td>@branch.Deployments[0].DeployedDate</td>
                            @*<td>@branch.Deployments[0].CreatorDetails?.login</td>*@
                        }
                        else
                        {
                            <td></td>

                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>

<Modal @ref="modal" Title="Repository Information" UseStaticBackdrop="true" Size="ModalSize.ExtraLarge" IsScrollable="true">
    <BodyTemplate>
        <RepoInfo />
    </BodyTemplate>
</Modal>

@code {
    private SearchForm searchForm = new();
    private Modal modal;
    private Repositories repository;

    [Parameter]
    public IEnumerable<string> Teams { get; set; } = new List<string>() { "Team-42", "Ultron", "Maurauders", "Content systems" };

    private IEnumerable<string> SearchTeams(string searchText)
    {
        return Teams.Where(x => x == searchText).ToList();
    }

    public void SubmitHandler()
    {
        var a = searchForm.TeamFilter;
        var b = searchForm.TeamProject;
    }

    private async Task OnShowModalClick(Repositories repo)
    {
        repository = repo;
        double codeCoveragevalue;

        if (@repo.Branches[0].CodeCoverage.Data.Repository.Metrics[9].Items[0].Values.Edges.Count > 0)
        {
            codeCoveragevalue = @repo.Branches[0].CodeCoverage.Data.Repository.Metrics[9].Items[0].Values.Edges[0].Node.Value;
        }
        else
        { codeCoveragevalue = 0; }

        var parameter = new Dictionary<string, object>();
        parameter.Add("repo", repository);
        parameter.Add("codeCoveragevalue", codeCoveragevalue);

        await modal?.ShowAsync<RepoInfo>(title: "Repository Information", parameters: parameter);
    }

    private async Task OnHideModalClick()
    {
        await modal?.HideAsync();
    }
}
