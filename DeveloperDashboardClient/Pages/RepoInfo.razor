@page "/repoinfo"
@using ChartJs.Blazor;
@using ChartJs.Blazor.Common;
@using ChartJs.Blazor.PieChart;
@using ChartJs.Blazor.Util;
@using DashboardLib.Dtos;

@if (repo != null)
{
    <section class="my-4">
        <section class="d-flex flex-row align-items-center justify-content-between px-5">
            <label for="StackName" class="form-label">Stack Name: <span class="px-2 fw-bolder fs-6"></span> @repo.Name </label>
            <label for="Branch" class="form-label">Branch: <span class="px-2 fw-bolder fs-6"> @repo.Branches[0].Name</span> </label>
            <label for="NoOfBranches" class="form-label">No of Branches: <span class="px-2 fw-bolder fs-6">@repo.Branches.Count</span> </label>
        </section>

        <div class="row d-flex align-items-center justify-content-around m-3">
            <div class="col-sm-12 col-md-6 col-lg-6 border rounded shadow chart-container-size">
                <div class="my-3 position-relative">
                    <Chart Config="_branchConfig">
                    </Chart>
                </div>
            </div>
            <div class="col-md-6 col-lg-6 border rounded shadow chart-container-size">
                <div class="mt-3 position-relative">
                    <Chart Config="_prConfig"></Chart>
                </div>
            </div>
        </div>

        <div class="row d-flex align-items-center justify-content-around m-3">
            <div class="col-sm-12 col-md-6 col-lg-6 border rounded m-3 shadow chart-container-size p-4">
                <h6 class="h6 fw-bolder fs-6">Code Coverage (Line Coverage)</h6>
                <RadzenRadialGauge Style="width: 100%; height: 240px" class="top-0">
                    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="20" Min="0" Max="160" TickPosition=@tickPosition>
                        <RadzenRadialGaugeScalePointer Value=@codeCoveragevalue Length="0.6" ShowValue=@showValue>
                            <Template Context="pointer">
                            </Template>
                        </RadzenRadialGaugeScalePointer>
                        <RadzenRadialGaugeScaleRange From="0" To="80" Fill="red" />
                        <RadzenRadialGaugeScaleRange From="81" To="160" Fill="green" />
                        @*<RadzenRadialGaugeScaleRange From="140" To="260" Fill="red" />*@
                    </RadzenRadialGaugeScale>
                </RadzenRadialGauge>
            </div>
            <div class="col-sm-12 col-md-6 col-lg-6 border rounded my-3 p-4 shadow mx-3 chart-container-size px-4">
                <h6 class="h6 fw-bolder fs-6">Deployment Details</h6>
                <small class="text-secondary">Only last 3 deployment details.</small>
                <table class="table grid-design">
                    <thead>
                        <tr>
                            <th>Branch Name</th>
                            <th>Deployed Date</th>
                            <th>Deployed By</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (repo.Branches[0].Deployments is not null && repo.Branches[0].Deployments.Count > 0)
                        {
                            @foreach (var deployment in repo.Branches[0].Deployments)
                            {
                                <tr>
                                    <td>@deployment.BranchName</td>
                                    <td>@deployment.DeployedDate</td>
                                    <td>@deployment.CreatorDetails.Login</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </section>
}


@code {
    //private PieConfig _branchConfig;
    //private PieConfig _prConfig;
    //bool showValue = true;
    //double value = 100;
    //GaugeTickPosition tickPosition;
    //IEnumerable<GaugeTickPosition> tickPositions;

    //protected override void OnInitialized()
    //{

    //    tickPositions = Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>();
    //    tickPosition = GaugeTickPosition.Inside;

    //    #region "Branch Config"
    //    _branchConfig = new PieConfig
    //        {
    //            Options = new PieOptions
    //            {
    //                Responsive = true,
    //                Title = new OptionsTitle
    //                {
    //                    Display = true,
    //                    Text = "Branch Details"
    //                }
    //            }
    //        };

    //    foreach (string color in new[] { "Active Branch", "InActive Branch" })
    //    {
    //        _branchConfig.Data.Labels.Add(color);
    //    }

    //    PieDataset<int> dataset = new PieDataset<int>(new[] { 6, 5 })
    //        {
    //            BackgroundColor = new[]
    //                                                                        {
    //        ColorUtil.ColorHexString(13, 71, 167), // Slice 1 aka "Red"
    //        ColorUtil.ColorHexString(77, 190, 206), // Slice 2 aka "Yellow"
    //        //ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
    //        //ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
    //    }
    //        };

    //    _branchConfig.Data.Datasets.Add(dataset);
        //    #endregion

    //    #region "PR Config"
    //    _prConfig = new PieConfig
    //        {
    //            Options = new PieOptions
    //            {
    //                Responsive = true,
    //                Title = new OptionsTitle
    //                {
    //                    Display = true,
    //                    Text = "Pull Request Details"
    //                }
    //            }
    //        };

    //    foreach (string color in new[] { "Open PR's", "Closed PR's" })
    //    {
    //        _prConfig.Data.Labels.Add(color);
    //    }

    //    PieDataset<int> data = new PieDataset<int>(new[] { 3, 7 })
    //        {
    //            BackgroundColor = new[]
    //                                                                            {
    //        ColorUtil.ColorHexString(249, 176, 65), // Slice 1 aka "orange"
    //        ColorUtil.ColorHexString(91, 198, 35), // Slice 2 aka "green"
    //        //ColorUtil.ColorHexString(75, 192, 192), // Slice 3 aka "Green"
    //        //ColorUtil.ColorHexString(54, 162, 235), // Slice 4 aka "Blue"
    //    }
    //        };

    //    _prConfig.Data.Datasets.Add(data);
        //    #endregion


    //}
}
